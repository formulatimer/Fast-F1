
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_gallery/plot_laptimes_distribution.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_plot_laptimes_distribution.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_plot_laptimes_distribution.py:

Driver Laptimes Distribution Visualization
=============================================
Visualizae different drivers' laptime distributions.

.. GENERATED FROM PYTHON SOURCE LINES 5-14

.. code-block:: default


    import fastf1
    import fastf1.plotting
    import seaborn as sns
    from matplotlib import pyplot as plt

    # enabling misc_mpl_mods will turn on minor grid lines that clutters the plot
    fastf1.plotting.setup_mpl(mpl_timedelta_support=False, misc_mpl_mods=False)








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Load the race session

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: default


    race = fastf1.get_session(2023, "Azerbaijan", 'R')
    race.load()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Request for URL https://ergast.com/api/f1/2023/4/results.json failed; using cached response
    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 467, in _make_request
        self._validate_conn(conn)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 1092, in _validate_conn
        conn.connect()
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connection.py", line 642, in connect
        sock_and_verified = _ssl_wrap_socket_and_match_hostname(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connection.py", line 783, in _ssl_wrap_socket_and_match_hostname
        ssl_sock = ssl_wrap_socket(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/util/ssl_.py", line 469, in ssl_wrap_socket
        ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/util/ssl_.py", line 513, in _ssl_wrap_socket_impl
        return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/ssl.py", line 501, in wrap_socket
        return self.sslsocket_class._create(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/ssl.py", line 1041, in _create
        self.do_handshake()
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/ssl.py", line 1310, in do_handshake
        self._sslobj.do_handshake()
    ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 790, in urlopen
        response = self._make_request(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 491, in _make_request
        raise new_e
    urllib3.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)

    The above exception was the direct cause of the following exception:

    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests/adapters.py", line 486, in send
        resp = conn.urlopen(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 844, in urlopen
        retries = retries.increment(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/util/retry.py", line 515, in increment
        raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
    urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='ergast.com', port=443): Max retries exceeded with url: /api/f1/2023/4/results.json (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)')))

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests_cache/session.py", line 255, in _resend
        response = self._send_and_cache(request, actions, cached_response, **kwargs)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests_cache/session.py", line 229, in _send_and_cache
        response = super().send(request, **kwargs)
      File "/home/runner/work/Fast-F1/Fast-F1/fastf1/req.py", line 124, in send
        return super().send(request, **kwargs)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests/sessions.py", line 703, in send
        r = adapter.send(request, **kwargs)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests/adapters.py", line 517, in send
        raise SSLError(e, request=request)
    requests.exceptions.SSLError: HTTPSConnectionPool(host='ergast.com', port=443): Max retries exceeded with url: /api/f1/2023/4/results.json (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)')))
    Request for URL https://ergast.com/api/f1/2023/4/laps/1.json failed; using cached response
    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 467, in _make_request
        self._validate_conn(conn)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 1092, in _validate_conn
        conn.connect()
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connection.py", line 642, in connect
        sock_and_verified = _ssl_wrap_socket_and_match_hostname(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connection.py", line 783, in _ssl_wrap_socket_and_match_hostname
        ssl_sock = ssl_wrap_socket(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/util/ssl_.py", line 469, in ssl_wrap_socket
        ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/util/ssl_.py", line 513, in _ssl_wrap_socket_impl
        return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/ssl.py", line 501, in wrap_socket
        return self.sslsocket_class._create(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/ssl.py", line 1041, in _create
        self.do_handshake()
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/ssl.py", line 1310, in do_handshake
        self._sslobj.do_handshake()
    ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 790, in urlopen
        response = self._make_request(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 491, in _make_request
        raise new_e
    urllib3.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)

    The above exception was the direct cause of the following exception:

    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests/adapters.py", line 486, in send
        resp = conn.urlopen(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/connectionpool.py", line 844, in urlopen
        retries = retries.increment(
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/urllib3/util/retry.py", line 515, in increment
        raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
    urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='ergast.com', port=443): Max retries exceeded with url: /api/f1/2023/4/laps/1.json (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)')))

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests_cache/session.py", line 255, in _resend
        response = self._send_and_cache(request, actions, cached_response, **kwargs)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests_cache/session.py", line 229, in _send_and_cache
        response = super().send(request, **kwargs)
      File "/home/runner/work/Fast-F1/Fast-F1/fastf1/req.py", line 124, in send
        return super().send(request, **kwargs)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests/sessions.py", line 703, in send
        r = adapter.send(request, **kwargs)
      File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/requests/adapters.py", line 517, in send
        raise SSLError(e, request=request)
    requests.exceptions.SSLError: HTTPSConnectionPool(host='ergast.com', port=443): Max retries exceeded with url: /api/f1/2023/4/laps/1.json (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)')))




.. GENERATED FROM PYTHON SOURCE LINES 21-24

Get all the laps for the point finishers only.
Filter out slow laps (yellow flag, VSC, pitstops etc.)
as they distort the graph axis.

.. GENERATED FROM PYTHON SOURCE LINES 24-29

.. code-block:: default

    point_finishers = race.drivers[:10]
    print(point_finishers)
    driver_laps = race.laps.pick_drivers(point_finishers).pick_quicklaps()
    driver_laps = driver_laps.reset_index()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['11', '1', '16', '14', '55', '44', '18', '63', '4', '22']




.. GENERATED FROM PYTHON SOURCE LINES 30-32

To plot the drivers by finishing order,
we need to get their three-letter abbreviations in the finishing order.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    finishing_order = [race.get_driver(i)["Abbreviation"] for i in point_finishers]
    print(finishing_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['PER', 'VER', 'LEC', 'ALO', 'SAI', 'HAM', 'STR', 'RUS', 'NOR', 'TSU']




.. GENERATED FROM PYTHON SOURCE LINES 36-40

We need to modify the DRIVER_COLORS palette.
Its keys are the driver's full names but we need the keys to be the drivers'
three-letter abbreviations.
We can do this with the DRIVER_TRANSLATE mapping.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default

    driver_colors = {abv: fastf1.plotting.DRIVER_COLORS[driver] for abv,
                     driver in fastf1.plotting.DRIVER_TRANSLATE.items()}
    print(driver_colors)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'LEC': '#dc0000', 'SAI': '#ff8181', 'SHW': '#9c0000', 'VER': '#0600ef', 'PER': '#716de2', 'PIA': '#ff8700', 'NOR': '#eeb370', 'GAS': '#0090ff', 'OCO': '#70c2ff', 'BOT': '#900000', 'ZHO': '#500000', 'DEV': '#1e3d61', 'TSU': '#356cac', 'RIC': '#2b4562', 'LAW': '#2b4562', 'MAG': '#ffffff', 'HUL': '#cacaca', 'ALO': '#006f62', 'STR': '#25a617', 'DRU': '#2f9b90', 'HAM': '#00d2be', 'RUS': '#24ffff', 'ALB': '#005aff', 'SAR': '#012564'}




.. GENERATED FROM PYTHON SOURCE LINES 45-47

First create the violin plots to show the distributions.
Then use the swarm plot to show the actual laptimes.

.. GENERATED FROM PYTHON SOURCE LINES 47-75

.. code-block:: default


    # create the figure
    fig, ax = plt.subplots(figsize=(10, 5))

    # Seaborn doesn't have proper timedelta support
    # so we have to convert timedelta to float (in seconds)
    driver_laps["LapTime(s)"] = driver_laps["LapTime"].dt.total_seconds()

    sns.violinplot(data=driver_laps,
                   x="Driver",
                   y="LapTime(s)",
                   inner=None,
                   scale="area",
                   order=finishing_order,
                   palette=driver_colors
                   )

    sns.swarmplot(data=driver_laps,
                  x="Driver",
                  y="LapTime(s)",
                  order=finishing_order,
                  hue="Compound",
                  palette=fastf1.plotting.COMPOUND_COLORS,
                  hue_order=["SOFT", "MEDIUM", "HARD"],
                  linewidth=0,
                  size=5,
                  )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='Driver', ylabel='LapTime(s)'>



.. GENERATED FROM PYTHON SOURCE LINES 77-78

Make the plot more aesthetic

.. GENERATED FROM PYTHON SOURCE LINES 78-85

.. code-block:: default

    ax.set_xlabel("Driver")
    ax.set_ylabel("Lap Time (s)")
    plt.suptitle("2023 Azerbaijan Grand Prix Lap Time Distributions")
    sns.despine(left=True, bottom=True)

    plt.tight_layout()
    plt.show()



.. image-sg:: /examples_gallery/images/sphx_glr_plot_laptimes_distribution_001.png
   :alt: 2023 Azerbaijan Grand Prix Lap Time Distributions
   :srcset: /examples_gallery/images/sphx_glr_plot_laptimes_distribution_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.414 seconds)


.. _sphx_glr_download_examples_gallery_plot_laptimes_distribution.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_laptimes_distribution.py <plot_laptimes_distribution.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_laptimes_distribution.ipynb <plot_laptimes_distribution.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
